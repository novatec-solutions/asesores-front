{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login/login.component.ts","./src/app/login/login/login.component.html","./src/app/shared/services/auth.service.ts","./node_modules/@angular/material/fesm2015/checkbox.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { MaterialModule } from '../shared/material.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    FlexLayoutModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    LoginRoutingModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ],\n  declarations: [LoginComponent]\n})\nexport class LoginModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '../../admin/dashboard/components/dialog/dialog.component';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  \n  constructor(private router: Router,\n    public fb: FormBuilder,\n    private AuthService: AuthService,\n    public dialog: MatDialog) {\n    this.loginForm = this.fb.group({\n      user: ['',Validators.required],\n      pass: ['',Validators.required]\n    });\n  }\n\n  ngOnInit() {}\n\n  onLogin() {\n    if(this.loginForm.valid){\n      const data = this.loginForm.value;\n      this.AuthService.loginUser(data).subscribe(res => {\n        if(!res.error){\n          localStorage.setItem('isLoggedin', 'true');\n          localStorage.setItem('username', res.data.name);\n          this.router.navigate(['/dashboard']);\n        }else{\n          const dialogRef = this.dialog.open(DialogComponent, { \n            width: '250px',\n            data: {text: res.mensaje},\n          });\n          dialogRef.afterClosed();\n        }\n      });\n    }\n    \n  }\n}\n","<div class=\"login-page\">\n  <div class=\"content px20\">\n    <form [formGroup]=\"loginForm\" class=\"login-form\" novalidate (ngSubmit)=\"onLogin()\">\n      <div class=\"login-form--icon\">\n        <img src=\"assets/images/login-icon.svg\" alt=\"Asesores Appp\">\n      </div>\n      <div class=\"text-center\">\n        <h2 class=\"app-name\">Asesores</h2>\n      </div>\n      <div fxLayout=\"row\">\n        <div fxFlexFill>\n          <div class=\"login-input w-100\">\n            <label class=\"login-input--label\">Usuario</label>\n            <input formControlName=\"user\" class=\"login-input--input\">\n          </div>\n          <div class=\"login-input w-100\">\n            <label class=\"login-input--label\">Contraseña</label>\n            <input type=\"password\" formControlName=\"pass\" class=\"login-input--input\">\n          </div>\n        </div>\n      </div>\n      <div class=\"login-form--submit\">\n        <button type=\"submit\" class=\"{{loginForm.invalid?'bg-light-grey':'bg-red'}} btn\" [disabled]=\"loginForm.invalid\">\n          Iniciar sesión\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public baseUrl: string;\n\n  constructor(private http: HttpClient) {\n    this.baseUrl = environment.url_server;\n  }\n\n  loginUser(data:any): Observable<any> {\n    const url = this.baseUrl + \"Landing-Asesores/Login/\";\n    return this.http.post<any>(url, data);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'unchecked-checked'\n                        : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix =\n                    newState === 2 /* Unchecked */\n                        ? 'checked-unchecked'\n                        : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'indeterminate-checked'\n                        : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n"],"names":["coerceBooleanProperty","i0","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","Input","Output","ViewChild","Directive","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","i1","i3","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxBase","constructor","_elementRef","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","inputId","required","_required","value","ngAfterViewInit","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","ngAfterViewChecked","ngOnDestroy","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","_inputElement","toggle","_onInputClick","_a","stopPropagation","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ɵfac","ElementRef","ChangeDetectorRef","FocusMonitor","NgZone","ɵcmp","CdkObserveContent","type","args","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","ariaDescribedby","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵdir","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatCheckboxModule","imports"],"sourceRoot":"webpack:///"}